{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/JobAppPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst JobAppPage = ({\n  fetchQuestions,\n  storage\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [questionTypes, setQuestionTypes] = useState([]);\n  const [questionAnswers, setQuestionAnswers] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const questionsPerPage = 4;\n\n  // This state will hold the questions for the current page\n  const [currentQstns, setCurrentQstns] = useState([]);\n\n  // This effect runs once on initial render to fetch the questions.\n  useEffect(() => {\n    const loadQuestions = async () => {\n      const response = await fetchQuestions(storage.getItem(\"jobId\"));\n      setQuestions(response);\n      setQuestionTypes(response.question_type);\n      setQuestionAnswers(response.answers);\n    };\n    loadQuestions();\n  }, [fetchQuestions, storage]);\n\n  // This effect runs whenever 'questions' or 'currentPage' changes.\n  // It's responsible for slicing the questions for the current page.\n  useEffect(() => {\n    if (questions && questions.length > 0) {\n      const indexofLastQuestion = currentPage * questionsPerPage;\n      const indexofFirstQuestion = indexofLastQuestion - questionsPerPage;\n      const currQuestions = questions.slice(indexofFirstQuestion, indexofLastQuestion);\n      setCurrentQstns(currQuestions);\n    }\n  }, [questions, currentPage]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: currentQstns.map((question, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: question\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(JobAppPage, \"9BL+eUKCyxWJ6i70nMxhf83covs=\");\n_c = JobAppPage;\nexport default JobAppPage;\nvar _c;\n$RefreshReg$(_c, \"JobAppPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","JobAppPage","fetchQuestions","storage","_s","questions","setQuestions","questionTypes","setQuestionTypes","questionAnswers","setQuestionAnswers","currentPage","setCurrentPage","questionsPerPage","currentQstns","setCurrentQstns","loadQuestions","response","getItem","question_type","answers","length","indexofLastQuestion","indexofFirstQuestion","currQuestions","slice","children","map","question","idx","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/JobAppPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst JobAppPage = ({ fetchQuestions, storage }) => {\n    const [questions, setQuestions] = useState([]);\n    const [questionTypes, setQuestionTypes] = useState([]);\n    const [questionAnswers, setQuestionAnswers] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const questionsPerPage = 4;\n\n    // This state will hold the questions for the current page\n    const [currentQstns, setCurrentQstns] = useState([]);\n\n    // This effect runs once on initial render to fetch the questions.\n    useEffect(() => {\n        const loadQuestions = async () => {\n            const response = await fetchQuestions(storage.getItem(\"jobId\"));\n            setQuestions(response);\n            setQuestionTypes(response.question_type);\n            setQuestionAnswers(response.answers);\n        };\n        loadQuestions();\n    }, [fetchQuestions, storage]);\n\n    // This effect runs whenever 'questions' or 'currentPage' changes.\n    // It's responsible for slicing the questions for the current page.\n    useEffect(() => {\n        if (questions && questions.length > 0) {\n            const indexofLastQuestion = currentPage * questionsPerPage;\n            const indexofFirstQuestion = indexofLastQuestion - questionsPerPage;\n            const currQuestions = questions.slice(indexofFirstQuestion, indexofLastQuestion);\n            setCurrentQstns(currQuestions);\n        }\n    }, [questions, currentPage]);\n\n    return (\n        <>\n            <div>\n                <ol>\n                    {currentQstns.map((question, idx) => (\n                        <li key={idx}>{question}</li>\n                    ))}\n                </ol>\n                {/* <button onClick={(e) => setCurrentPage()}></button> */}\n            </div>\n        </>\n    );\n};\n\nexport default JobAppPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,cAAc;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMkB,gBAAgB,GAAG,CAAC;;EAE1B;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMoB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMC,QAAQ,GAAG,MAAMf,cAAc,CAACC,OAAO,CAACe,OAAO,CAAC,OAAO,CAAC,CAAC;MAC/DZ,YAAY,CAACW,QAAQ,CAAC;MACtBT,gBAAgB,CAACS,QAAQ,CAACE,aAAa,CAAC;MACxCT,kBAAkB,CAACO,QAAQ,CAACG,OAAO,CAAC;IACxC,CAAC;IACDJ,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACd,cAAc,EAAEC,OAAO,CAAC,CAAC;;EAE7B;EACA;EACAP,SAAS,CAAC,MAAM;IACZ,IAAIS,SAAS,IAAIA,SAAS,CAACgB,MAAM,GAAG,CAAC,EAAE;MACnC,MAAMC,mBAAmB,GAAGX,WAAW,GAAGE,gBAAgB;MAC1D,MAAMU,oBAAoB,GAAGD,mBAAmB,GAAGT,gBAAgB;MACnE,MAAMW,aAAa,GAAGnB,SAAS,CAACoB,KAAK,CAACF,oBAAoB,EAAED,mBAAmB,CAAC;MAChFP,eAAe,CAACS,aAAa,CAAC;IAClC;EACJ,CAAC,EAAE,CAACnB,SAAS,EAAEM,WAAW,CAAC,CAAC;EAE5B,oBACIb,OAAA,CAAAE,SAAA;IAAA0B,QAAA,eACI5B,OAAA;MAAA4B,QAAA,eACI5B,OAAA;QAAA4B,QAAA,EACKZ,YAAY,CAACa,GAAG,CAAC,CAACC,QAAQ,EAAEC,GAAG,kBAC5B/B,OAAA;UAAA4B,QAAA,EAAeE;QAAQ,GAAdC,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CAC/B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEJ;EAAC,gBACR,CAAC;AAEX,CAAC;AAAC7B,EAAA,CA5CIH,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AA8ChB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}