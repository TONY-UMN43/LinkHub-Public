{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ComponentsLists.jsx\";\nimport AccountRegister from \"./ChildComponents/AccountRegister\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ComponentsLists = () => {\n  const createAccount = async userInfo => {\n    try {\n      console.log(\"Payload sent\");\n      const response = await fetch(\"http://localhost:8000/register/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"applications/json\"\n        },\n        body: JSON.stringify(userInfo)\n      });\n      // if (!response.ok){\n      //     alert(\"Username or Email already exist, Please a choose a different one\");\n      //     return;\n      // }\n\n      if (!response.ok) {\n        // const errorData = response.json().catch();\n        // console.log(`Backend Error ${response.status}:`,errorData);\n        // throw new Error(`HTTP Error: ${response.status} - ${JSON.stringify(errorData)}`);\n        return response.text().then(text => {\n          throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n        });\n      }\n      const responseData = await response.json();\n    } catch (error) {\n      console.log(`Couldn't create new Account: ${error}`);\n      alert(`Account couldn't be created ${error}`);\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/register/\",\n          element: /*#__PURE__*/_jsxDEV(AccountRegister, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_c = ComponentsLists;\nexport default ComponentsLists;\nvar _c;\n$RefreshReg$(_c, \"ComponentsLists\");","map":{"version":3,"names":["AccountRegister","React","useState","useEffect","BrowserRouter","Routes","Route","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ComponentsLists","createAccount","userInfo","console","log","response","fetch","method","headers","body","JSON","stringify","ok","text","then","Error","status","responseData","json","error","alert","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ComponentsLists.jsx"],"sourcesContent":["import AccountRegister from \"./ChildComponents/AccountRegister\";\nimport React,{useState,useEffect} from \"react\";\nimport { BrowserRouter,Routes,Route } from \"react-router-dom\";\nimport { useNavigate } from \"react-router\";\n\nconst ComponentsLists = () => {\n\n    const createAccount = async(userInfo) => {\n        try{\n            console.log(\"Payload sent\");\n            const response = await fetch(\"http://localhost:8000/register/\", {\n            method: \"POST\",\n            headers: {\"Content-Type\":\"applications/json\",},\n            body: JSON.stringify(userInfo),\n        })\n        // if (!response.ok){\n        //     alert(\"Username or Email already exist, Please a choose a different one\");\n        //     return;\n        // }\n\n        if (!response.ok){\n            // const errorData = response.json().catch();\n            // console.log(`Backend Error ${response.status}:`,errorData);\n            // throw new Error(`HTTP Error: ${response.status} - ${JSON.stringify(errorData)}`);\n            return response.text().then(text => {\n                throw new Error(`HTTP error! status: ${response.status}, response: ${text}`)});\n        }\n\n        const responseData = await response.json();\n\n    }\n    catch(error){\n        console.log(`Couldn't create new Account: ${error}`);\n        alert(`Account couldn't be created ${error}`);\n        return;\n    }\n\n    }\n    return (\n        <>\n        <div>\n        <Routes>\n        <Route path=\"/register/\" element={<AccountRegister />}/>\n        </Routes>\n        </div>\n        </>\n    )\n}\n\nexport default ComponentsLists;"],"mappings":";AAAA,OAAOA,eAAe,MAAM,mCAAmC;AAC/D,OAAOC,KAAK,IAAEC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAC9C,SAASC,aAAa,EAACC,MAAM,EAACC,KAAK,QAAQ,kBAAkB;AAC7D,SAASC,WAAW,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAE1B,MAAMC,aAAa,GAAG,MAAMC,QAAQ,IAAK;IACrC,IAAG;MACCC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAC,cAAc,EAAC;QAAoB,CAAC;QAC9CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;MACjC,CAAC,CAAC;MACF;MACA;MACA;MACA;;MAEA,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAC;QACb;QACA;QACA;QACA,OAAOP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAACC,IAAI,CAACD,IAAI,IAAI;UAChC,MAAM,IAAIE,KAAK,CAAC,uBAAuBV,QAAQ,CAACW,MAAM,eAAeH,IAAI,EAAE,CAAC;QAAA,CAAC,CAAC;MACtF;MAEA,MAAMI,YAAY,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAE9C,CAAC,CACD,OAAMC,KAAK,EAAC;MACRhB,OAAO,CAACC,GAAG,CAAC,gCAAgCe,KAAK,EAAE,CAAC;MACpDC,KAAK,CAAC,+BAA+BD,KAAK,EAAE,CAAC;MAC7C;IACJ;EAEA,CAAC;EACD,oBACItB,OAAA,CAAAE,SAAA;IAAAsB,QAAA,eACAxB,OAAA;MAAAwB,QAAA,eACAxB,OAAA,CAACJ,MAAM;QAAA4B,QAAA,eACPxB,OAAA,CAACH,KAAK;UAAC4B,IAAI,EAAC,YAAY;UAACC,OAAO,eAAE1B,OAAA,CAACT,eAAe;YAAAoC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC,gBACJ,CAAC;AAEX,CAAC;AAAAC,EAAA,GA1CK5B,eAAe;AA4CrB,eAAeA,eAAe;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}