{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/MiniQuizHome.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"./childComponents.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FORM_STAGES = {\n  PAGEONE: \"pageone\",\n  PAGETWO: \"pagetwo\",\n  PAGETHREE: \"pagethree\",\n  PAGEFOUR: \"pagefour\",\n  PAGEFIVE: \"pagefive\"\n  // PAGESIX: \"pagesix\",\n  // PAGEONE: \"pageone\",\n  // PAGEONE: \"pageone\",\n  // PAGEONE: \"pageone\",\n};\nconst MiniQuizHome = ({\n  node\n}) => {\n  _s();\n  const [currentNode, setCurrentNode] = useState(node);\n  const navigate = useNavigate();\n  const handleAnswer = answer => {\n    setCurrentNode(answer.next);\n  };\n  if (currentNode.result) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your best career match is:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentNode.result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentNode.question ?\n      /*#__PURE__*/\n      // If it's a question, display the question and its answers\n      _jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentNode.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: currentNode.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleAnswer(answer),\n                children: answer.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // If it's not a question, it must be a result node\n      _jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Quiz Result:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentNode.result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {/* logic to restart quiz */},\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(MiniQuizHome, \"Zc9C3Ayt7m6MiYetVJEmF+bkNhY=\", false, function () {\n  return [useNavigate];\n});\n_c = MiniQuizHome;\nexport default MiniQuizHome;\nvar _c;\n$RefreshReg$(_c, \"MiniQuizHome\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","FORM_STAGES","PAGEONE","PAGETWO","PAGETHREE","PAGEFOUR","PAGEFIVE","MiniQuizHome","node","_s","currentNode","setCurrentNode","navigate","handleAnswer","answer","next","result","children","fileName","_jsxFileName","lineNumber","columnNumber","question","answers","map","index","onClick","text","_c","$RefreshReg$"],"sources":["/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/MiniQuizHome.jsx"],"sourcesContent":["import React,{useState} from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"./childComponents.css\";\n\nconst FORM_STAGES = {\n    PAGEONE: \"pageone\",\n    PAGETWO: \"pagetwo\",\n    PAGETHREE: \"pagethree\",\n    PAGEFOUR: \"pagefour\",\n    PAGEFIVE: \"pagefive\",\n    // PAGESIX: \"pagesix\",\n    // PAGEONE: \"pageone\",\n    // PAGEONE: \"pageone\",\n    // PAGEONE: \"pageone\",\n\n}\n\nconst MiniQuizHome = ({node}) => {\n\n    const [currentNode,setCurrentNode] = useState(node);\n    const navigate = useNavigate();\n\n    const handleAnswer = (answer) =>{\n        setCurrentNode(answer.next);\n    }\n    if (currentNode.result){\n        return(\n            <div>\n            <h2>Your best career match is:</h2>\n            <p>{currentNode.result}</p>\n            </div>\n        )\n    }\n\n    return (\n        <>\n        <div>\n            {/* Check if currentNode has a 'question' property (i.e., it's a question node) */}\n            {currentNode.question ? (\n                // If it's a question, display the question and its answers\n                <>\n                    <h2>{currentNode.question}</h2>\n                    <div>\n                        {/* Use <ul> and <li> for semantic list of buttons */}\n                        <ul>\n                            {currentNode.answers.map((answer, index) => (\n                                <li key={index}> {/* key prop should be on the list item */}\n                                    <button onClick={() => handleAnswer(answer)}>\n                                        {answer.text}\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </>\n            ) : (\n                // If it's not a question, it must be a result node\n                <>\n                    <h2>Quiz Result:</h2>\n                    <p>{currentNode.result}</p>\n                    {/* Optionally, add a \"Start Over\" or \"Take Again\" button */}\n                    <button onClick={() => {/* logic to restart quiz */}}>Start Over</button>\n                </>\n            )}\n        </div>\n        </>\n    );\n}\n\nexport default MiniQuizHome;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}