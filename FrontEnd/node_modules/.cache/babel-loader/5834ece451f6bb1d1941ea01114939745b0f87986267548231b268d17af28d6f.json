{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/JobAppPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst JobAppPage = ({\n  fetchQuestions,\n  storage\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [questionTypes, setQuestionTypes] = useState([]);\n  const [questionAnswers, setQuestionAnswers] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const questionsperPage = 4;\n  const [currentQuestions, setCurrentQuestions] = useState([]);\n  // const indexofLastQuestion = currentPage * questionsperPage;\n  // const indexofFirsttQuestion = indexofLastQuestion- questionsperPage\n  // const sliced = questions.slice(indexofFirsttQuestion,indexofLastQuestion);\n\n  useEffect(() => {\n    loadQuestions();\n    const indexofLastQuestion = currentPage * questionsperPage;\n    const indexofFirsttQuestion = indexofLastQuestion - questionsperPage;\n    const sliced = questions.slice(indexofFirsttQuestion, indexofLastQuestion);\n    setCurrentQuestions(sliced);\n  }, [questions, currentPage]);\n  const loadQuestions = async () => {\n    const response = await fetchQuestions(storage.getItem(\"jobId\"));\n    setQuestions(response.questions);\n    setQuestionTypes(response.question_types);\n    setQuestionAnswers(response.answers);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: cu.map((question, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: question\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(JobAppPage, \"KaNJBL7qWrjhQQj18SmQD89M2aA=\");\n_c = JobAppPage;\nexport default JobAppPage;\nvar _c;\n$RefreshReg$(_c, \"JobAppPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","JobAppPage","fetchQuestions","storage","_s","questions","setQuestions","questionTypes","setQuestionTypes","questionAnswers","setQuestionAnswers","currentPage","setCurrentPage","questionsperPage","currentQuestions","setCurrentQuestions","loadQuestions","indexofLastQuestion","indexofFirsttQuestion","sliced","slice","response","getItem","question_types","answers","children","cu","map","question","idx","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/JobAppPage.jsx"],"sourcesContent":["import React,{useState,useEffect} from \"react\";\n\nconst JobAppPage = ({fetchQuestions,storage}) => {\n    const [questions,setQuestions] = useState([]);\n    const [questionTypes,setQuestionTypes] = useState([]);\n    const [questionAnswers,setQuestionAnswers] = useState([]);\n    const [currentPage,setCurrentPage] = useState(1);\n    const questionsperPage = 4;\n    const [currentQuestions,setCurrentQuestions] = useState([]);\n    // const indexofLastQuestion = currentPage * questionsperPage;\n    // const indexofFirsttQuestion = indexofLastQuestion- questionsperPage\n    // const sliced = questions.slice(indexofFirsttQuestion,indexofLastQuestion);\n\n    useEffect(()=>{\n        loadQuestions();\n        const indexofLastQuestion = currentPage * questionsperPage;\n        const indexofFirsttQuestion = indexofLastQuestion- questionsperPage\n        const sliced = questions.slice(indexofFirsttQuestion,indexofLastQuestion);\n        setCurrentQuestions(sliced);\n    },[questions,currentPage]);\n\n    const loadQuestions = async() => {\n        const response = await fetchQuestions(storage.getItem(\"jobId\"));\n        setQuestions(response.questions);\n        setQuestionTypes(response.question_types);\n        setQuestionAnswers(response.answers);\n    }\n\n    return (\n        <>\n        <div>\n        <ol>\n        {cu.map((question,idx) => (\n            <li key={idx}>{question}</li>\n        ))}\n        </ol>\n        {/* <button onClick={(e) => setCurrentPage()}></button> */}\n        </div>\n        </>\n    )\n}\n\nexport default JobAppPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,UAAU,GAAGA,CAAC;EAACC,cAAc;EAACC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACY,aAAa,EAACC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACrD,MAAM,CAACc,eAAe,EAACC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACzD,MAAM,CAACgB,WAAW,EAACC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EAChD,MAAMkB,gBAAgB,GAAG,CAAC;EAC1B,MAAM,CAACC,gBAAgB,EAACC,mBAAmB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC3D;EACA;EACA;;EAEAC,SAAS,CAAC,MAAI;IACVoB,aAAa,CAAC,CAAC;IACf,MAAMC,mBAAmB,GAAGN,WAAW,GAAGE,gBAAgB;IAC1D,MAAMK,qBAAqB,GAAGD,mBAAmB,GAAEJ,gBAAgB;IACnE,MAAMM,MAAM,GAAGd,SAAS,CAACe,KAAK,CAACF,qBAAqB,EAACD,mBAAmB,CAAC;IACzEF,mBAAmB,CAACI,MAAM,CAAC;EAC/B,CAAC,EAAC,CAACd,SAAS,EAACM,WAAW,CAAC,CAAC;EAE1B,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAW;IAC7B,MAAMK,QAAQ,GAAG,MAAMnB,cAAc,CAACC,OAAO,CAACmB,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/DhB,YAAY,CAACe,QAAQ,CAAChB,SAAS,CAAC;IAChCG,gBAAgB,CAACa,QAAQ,CAACE,cAAc,CAAC;IACzCb,kBAAkB,CAACW,QAAQ,CAACG,OAAO,CAAC;EACxC,CAAC;EAED,oBACI1B,OAAA,CAAAE,SAAA;IAAAyB,QAAA,eACA3B,OAAA;MAAA2B,QAAA,eACA3B,OAAA;QAAA2B,QAAA,EACCC,EAAE,CAACC,GAAG,CAAC,CAACC,QAAQ,EAACC,GAAG,kBACjB/B,OAAA;UAAA2B,QAAA,EAAeG;QAAQ,GAAdC,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CAC/B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEA;EAAC,gBACJ,CAAC;AAEX,CAAC;AAAA7B,EAAA,CAtCKH,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AAwChB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}