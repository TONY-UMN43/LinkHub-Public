{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/MiniQuizHome.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"./childComponents.css\";\nimport QuizTree from \"./QuizTree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FORM_STAGES = {\n  PAGEONE: \"pageone\",\n  PAGETWO: \"pagetwo\",\n  PAGETHREE: \"pagethree\",\n  PAGEFOUR: \"pagefour\",\n  PAGEFIVE: \"pagefive\"\n  // PAGESIX: \"pagesix\",\n  // PAGEONE: \"pageone\",\n  // PAGEONE: \"pageone\",\n  // PAGEONE: \"pageone\",\n};\nconst MiniQuizHome = ({\n  node\n}) => {\n  _s();\n  const [currentQuestionId, setCurrentQuestionId] = useState(\"q1\"); // Start at the first question\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [quizResult, setQuizResult] = useState(null); // To store the final result string\n  const [selectedAnswerId, setSelectedAnswerId] = useState(null); // To track the currently selected radio button\n\n  const getNodeById = id => {\n    return QuizTree.find(node => node.id === id);\n  };\n  useEffect(() => {\n    // Find the current node (question or result) based on currentQuestionId\n    const node = getNodeById(currentQuestionId);\n    if (node) {\n      if (node.question) {\n        // It's a question node\n        setCurrentQuestion(node);\n        setQuizResult(null); // Clear result if navigating back to a question\n        setSelectedAnswerId(null); // Reset selected answer for new question\n      } else if (node.result) {\n        // It's a result node\n        setQuizResult(node.result);\n        setCurrentQuestion(null); // Hide question UI\n      }\n    } else {\n      console.error(\"Error: Node not found for ID:\", currentQuestionId);\n      // Optionally, handle error by showing an error message or restarting\n      setQuizResult(\"An error occurred. Please restart the quiz.\");\n      setCurrentQuestion(null);\n    }\n  }, [currentQuestionId]); // Re-run effect when currentQuestionId changes\n\n  // Handles when a user selects a radio button\n  const handleRadioChange = uniqueAnswerId => {\n    setSelectedAnswerId(uniqueAnswerId);\n  };\n\n  // Handles when the user clicks the \"Next\" button\n  const handleSubmitAnswer = () => {\n    if (selectedAnswerId === null) {\n      alert(\"Please select an answer before proceeding!\");\n      return;\n    }\n\n    // Find the current question object\n    const question = getNodeById(currentQuestionId);\n    if (!question || !question.answers) {\n      console.error(\"Current question or its answers are undefined.\", question);\n      alert(\"An internal error occurred. Please try again.\");\n      return;\n    }\n\n    // Find the selected answer object from the current question's answers\n    const selectedAnswer = question.answers.find((ans, index) => `${question.id}-${index}` === selectedAnswerId);\n    if (selectedAnswer) {\n      if (selectedAnswer.nextQuestionId) {\n        setCurrentQuestionId(selectedAnswer.nextQuestionId);\n      } else if (selectedAnswer.resultId) {\n        // If it's a result, update the currentQuestionId to point to the result node\n        // The useEffect will then pick this up and display the result.\n        setCurrentQuestionId(selectedAnswer.resultId);\n      }\n    } else {\n      console.error(\"Selected answer not found for ID:\", selectedAnswerId);\n      alert(\"Please select a valid answer.\");\n    }\n  };\n  const restartQuiz = () => {\n    setCurrentQuestionId(\"q1\");\n    setQuizResult(null);\n    setSelectedAnswerId(null);\n  };\n\n  // --- Render Logic ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: quizResult ?\n    /*#__PURE__*/\n    // Display Quiz Result\n    _jsxDEV(\"div\", {\n      className: \"quiz-result-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Recommended Role:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"quiz-result\",\n        children: quizResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"quiz-button\",\n        onClick: restartQuiz,\n        children: \"Start Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this) :\n    // Display Current Question\n    currentQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-question-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-options\",\n        children: currentQuestion.answers.map((answer, index) => {\n          const uniqueAnswerId = `${currentQuestion.id}-${index}`; // Unique ID for each radio option\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quiz-option-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: uniqueAnswerId,\n              name: `question-${currentQuestion.id}` // Group radio buttons by question\n              ,\n              value: uniqueAnswerId,\n              checked: selectedAnswerId === uniqueAnswerId,\n              onChange: () => handleRadioChange(uniqueAnswerId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: uniqueAnswerId,\n              children: answer.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 41\n            }, this)]\n          }, uniqueAnswerId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"quiz-button\",\n        onClick: handleSubmitAnswer,\n        disabled: selectedAnswerId === null // Disable if no answer is selected\n        ,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    // Loading or error state\n    _jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(MiniQuizHome, \"1a9+O1nuPisardzCibHAzB94dOw=\");\n_c = MiniQuizHome;\nexport default MiniQuizHome;\nvar _c;\n$RefreshReg$(_c, \"MiniQuizHome\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","QuizTree","jsxDEV","_jsxDEV","FORM_STAGES","PAGEONE","PAGETWO","PAGETHREE","PAGEFOUR","PAGEFIVE","MiniQuizHome","node","_s","currentQuestionId","setCurrentQuestionId","currentQuestion","setCurrentQuestion","quizResult","setQuizResult","selectedAnswerId","setSelectedAnswerId","getNodeById","id","find","question","result","console","error","handleRadioChange","uniqueAnswerId","handleSubmitAnswer","alert","answers","selectedAnswer","ans","index","nextQuestionId","resultId","restartQuiz","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","answer","type","name","value","checked","onChange","htmlFor","text","disabled","_c","$RefreshReg$"],"sources":["/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/MiniQuizHome.jsx"],"sourcesContent":["import React,{useState,useEffect} from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"./childComponents.css\";\nimport QuizTree from \"./QuizTree\";\n\nconst FORM_STAGES = {\n    PAGEONE: \"pageone\",\n    PAGETWO: \"pagetwo\",\n    PAGETHREE: \"pagethree\",\n    PAGEFOUR: \"pagefour\",\n    PAGEFIVE: \"pagefive\",\n    // PAGESIX: \"pagesix\",\n    // PAGEONE: \"pageone\",\n    // PAGEONE: \"pageone\",\n    // PAGEONE: \"pageone\",\n\n}\n\nconst MiniQuizHome = ({node}) => {\n    const [currentQuestionId, setCurrentQuestionId] = useState(\"q1\"); // Start at the first question\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [quizResult, setQuizResult] = useState(null); // To store the final result string\n    const [selectedAnswerId, setSelectedAnswerId] = useState(null); // To track the currently selected radio button\n\n    const getNodeById = (id) => {\n        return QuizTree.find(node => node.id === id);\n    };\n\n    useEffect(() => {\n        // Find the current node (question or result) based on currentQuestionId\n        const node = getNodeById(currentQuestionId);\n        if (node) {\n            if (node.question) { // It's a question node\n                setCurrentQuestion(node);\n                setQuizResult(null); // Clear result if navigating back to a question\n                setSelectedAnswerId(null); // Reset selected answer for new question\n            } else if (node.result) { // It's a result node\n                setQuizResult(node.result);\n                setCurrentQuestion(null); // Hide question UI\n            }\n        } else {\n            console.error(\"Error: Node not found for ID:\", currentQuestionId);\n            // Optionally, handle error by showing an error message or restarting\n            setQuizResult(\"An error occurred. Please restart the quiz.\");\n            setCurrentQuestion(null);\n        }\n    }, [currentQuestionId]); // Re-run effect when currentQuestionId changes\n\n    // Handles when a user selects a radio button\n    const handleRadioChange = (uniqueAnswerId) => {\n        setSelectedAnswerId(uniqueAnswerId);\n    };\n\n    // Handles when the user clicks the \"Next\" button\n    const handleSubmitAnswer = () => {\n        if (selectedAnswerId === null) {\n            alert(\"Please select an answer before proceeding!\");\n            return;\n        }\n\n        // Find the current question object\n        const question = getNodeById(currentQuestionId);\n        if (!question || !question.answers) {\n            console.error(\"Current question or its answers are undefined.\", question);\n            alert(\"An internal error occurred. Please try again.\");\n            return;\n        }\n\n        // Find the selected answer object from the current question's answers\n        const selectedAnswer = question.answers.find(\n            (ans, index) => `${question.id}-${index}` === selectedAnswerId\n        );\n\n        if (selectedAnswer) {\n            if (selectedAnswer.nextQuestionId) {\n                setCurrentQuestionId(selectedAnswer.nextQuestionId);\n            } else if (selectedAnswer.resultId) {\n                // If it's a result, update the currentQuestionId to point to the result node\n                // The useEffect will then pick this up and display the result.\n                setCurrentQuestionId(selectedAnswer.resultId);\n            }\n        } else {\n            console.error(\"Selected answer not found for ID:\", selectedAnswerId);\n            alert(\"Please select a valid answer.\");\n        }\n    };\n\n    const restartQuiz = () => {\n        setCurrentQuestionId(\"q1\");\n        setQuizResult(null);\n        setSelectedAnswerId(null);\n    };\n\n    // --- Render Logic ---\n    return (\n        <div className=\"quiz-container\">\n            {quizResult ? (\n                // Display Quiz Result\n                <div className=\"quiz-result-section\">\n                    <h2>Your Recommended Role:</h2>\n                    <p className=\"quiz-result\">{quizResult}</p>\n                    <button className=\"quiz-button\" onClick={restartQuiz}>Start Over</button>\n                </div>\n            ) : (\n                // Display Current Question\n                currentQuestion ? (\n                    <div className=\"quiz-question-section\">\n                        <h2>{currentQuestion.question}</h2>\n                        <div className=\"quiz-options\">\n                            {currentQuestion.answers.map((answer, index) => {\n                                const uniqueAnswerId = `${currentQuestion.id}-${index}`; // Unique ID for each radio option\n                                return (\n                                    <div key={uniqueAnswerId} className=\"quiz-option-item\">\n                                        <input\n                                            type=\"radio\"\n                                            id={uniqueAnswerId}\n                                            name={`question-${currentQuestion.id}`} // Group radio buttons by question\n                                            value={uniqueAnswerId}\n                                            checked={selectedAnswerId === uniqueAnswerId}\n                                            onChange={() => handleRadioChange(uniqueAnswerId)}\n                                        />\n                                        <label htmlFor={uniqueAnswerId}>{answer.text}</label>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <button\n                            className=\"quiz-button\"\n                            onClick={handleSubmitAnswer}\n                            disabled={selectedAnswerId === null} // Disable if no answer is selected\n                        >\n                            Next\n                        </button>\n                    </div>\n                ) : (\n                    // Loading or error state\n                    <div>Loading quiz...</div>\n                )\n            )}\n        </div>\n    );\n}\n\nexport default MiniQuizHome;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}