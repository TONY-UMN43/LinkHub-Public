{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/JobAppPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst JobAppPage = ({\n  fetchQuestions,\n  storage\n}) => {\n  _s();\n  // We'll use a single state to hold the entire array of question objects.\n  const [questionsData, setQuestionsData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const questionsPerPage = 4;\n  const [currentQstns, setCurrentQstns] = useState([]);\n\n  // This effect runs once on initial render to fetch the questions.\n  useEffect(() => {\n    const loadQuestions = async () => {\n      const response = await fetchQuestions(storage.getItem(\"jobId\"));\n      // The response is already the array of questions, so we set it directly.\n      setQuestionsData(response);\n    };\n    loadQuestions();\n  }, [fetchQuestions, storage]);\n\n  // This effect runs whenever 'questionsData' or 'currentPage' changes.\n  // It's responsible for slicing the questions for the current page.\n  useEffect(() => {\n    if (questionsData && questionsData.length > 0) {\n      const indexofLastQuestion = currentPage * questionsPerPage;\n      const indexofFirstQuestion = indexofLastQuestion - questionsPerPage;\n      const currQuestions = questionsData.slice(indexofFirstQuestion, indexofLastQuestion);\n      setCurrentQstns(currQuestions);\n    }\n  }, [questionsData, currentPage, questionsPerPage]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n        children: currentQstns.map((question, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: question.question\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this), question.question_type === \"Written Response\" && t]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(currentPage + 1),\n        children: \"Next Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(JobAppPage, \"DCP68PNUeVVFOdB2suBukCXQ6ao=\");\n_c = JobAppPage;\nexport default JobAppPage;\nvar _c;\n$RefreshReg$(_c, \"JobAppPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","JobAppPage","fetchQuestions","storage","_s","questionsData","setQuestionsData","currentPage","setCurrentPage","questionsPerPage","currentQstns","setCurrentQstns","loadQuestions","response","getItem","length","indexofLastQuestion","indexofFirstQuestion","currQuestions","slice","children","map","question","idx","fileName","_jsxFileName","lineNumber","columnNumber","question_type","t","onClick","_c","$RefreshReg$"],"sources":["/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/JobAppPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst JobAppPage = ({ fetchQuestions, storage }) => {\n    // We'll use a single state to hold the entire array of question objects.\n    const [questionsData, setQuestionsData] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const questionsPerPage = 4;\n    const [currentQstns, setCurrentQstns] = useState([]);\n\n    // This effect runs once on initial render to fetch the questions.\n    useEffect(() => {\n        const loadQuestions = async () => {\n            const response = await fetchQuestions(storage.getItem(\"jobId\"));\n            // The response is already the array of questions, so we set it directly.\n            setQuestionsData(response);\n        };\n        loadQuestions();\n    }, [fetchQuestions, storage]);\n\n    // This effect runs whenever 'questionsData' or 'currentPage' changes.\n    // It's responsible for slicing the questions for the current page.\n    useEffect(() => {\n        if (questionsData && questionsData.length > 0) {\n            const indexofLastQuestion = currentPage * questionsPerPage;\n            const indexofFirstQuestion = indexofLastQuestion - questionsPerPage;\n            const currQuestions = questionsData.slice(indexofFirstQuestion, indexofLastQuestion);\n            setCurrentQstns(currQuestions);\n        }\n    }, [questionsData, currentPage, questionsPerPage]);\n\n    return (\n        <>\n            <div>\n                <ol>\n                    {/* Now we map over the objects and access the 'question' property */}\n                    {currentQstns.map((question, idx) => (\n                        <div>\n                        <li key={idx}>{question.question}</li>\n                        {/* {question.question_type === \"Multiple-choice\" && (\n                            <input type=\"radio\"\n                              />\n                        )} */}\n                        {question.question_type === \"Written Response\" && (\n                            t\n                        )}\n                        </div>\n                    ))}\n                </ol>\n                {/* Add a button for pagination */}\n                <button onClick={() => setCurrentPage(currentPage + 1)}>Next Page</button>\n            </div>\n        </>\n    );\n};\n\nexport default JobAppPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,cAAc;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAChD;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMc,gBAAgB,GAAG,CAAC;EAC1B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMC,QAAQ,GAAG,MAAMX,cAAc,CAACC,OAAO,CAACW,OAAO,CAAC,OAAO,CAAC,CAAC;MAC/D;MACAR,gBAAgB,CAACO,QAAQ,CAAC;IAC9B,CAAC;IACDD,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACV,cAAc,EAAEC,OAAO,CAAC,CAAC;;EAE7B;EACA;EACAP,SAAS,CAAC,MAAM;IACZ,IAAIS,aAAa,IAAIA,aAAa,CAACU,MAAM,GAAG,CAAC,EAAE;MAC3C,MAAMC,mBAAmB,GAAGT,WAAW,GAAGE,gBAAgB;MAC1D,MAAMQ,oBAAoB,GAAGD,mBAAmB,GAAGP,gBAAgB;MACnE,MAAMS,aAAa,GAAGb,aAAa,CAACc,KAAK,CAACF,oBAAoB,EAAED,mBAAmB,CAAC;MACpFL,eAAe,CAACO,aAAa,CAAC;IAClC;EACJ,CAAC,EAAE,CAACb,aAAa,EAAEE,WAAW,EAAEE,gBAAgB,CAAC,CAAC;EAElD,oBACIX,OAAA,CAAAE,SAAA;IAAAoB,QAAA,eACItB,OAAA;MAAAsB,QAAA,gBACItB,OAAA;QAAAsB,QAAA,EAEKV,YAAY,CAACW,GAAG,CAAC,CAACC,QAAQ,EAAEC,GAAG,kBAC5BzB,OAAA;UAAAsB,QAAA,gBACAtB,OAAA;YAAAsB,QAAA,EAAeE,QAAQ,CAACA;UAAQ,GAAvBC,GAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAyB,CAAC,EAKrCL,QAAQ,CAACM,aAAa,KAAK,kBAAkB,IAC1CC,CACH;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAEL7B,OAAA;QAAQgC,OAAO,EAAEA,CAAA,KAAMtB,cAAc,CAACD,WAAW,GAAG,CAAC,CAAE;QAAAa,QAAA,EAAC;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE;EAAC,gBACR,CAAC;AAEX,CAAC;AAACvB,EAAA,CAnDIH,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AAqDhB,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}