{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/AccountRegisterAwait.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Assuming you're using react-router-dom for navigation\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AccountRegisterAwait = ({\n  resendEmail,\n  storage\n}) => {\n  _s();\n  const navigate = useNavigate(); // Initialize useNavigate if you're using it elsewhere, otherwise remove\n\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [cooldownTime, setCooldownTime] = useState(0); // Time in seconds\n  const timerRef = useRef(null); // To store the interval ID\n\n  const COOLDOWN_DURATION = 120; // 2 minutes in seconds (adjust as needed)\n\n  // Load cooldown time from storage on component mount\n  useEffect(() => {\n    const storedCooldownEnd = localStorage.getItem(\"resendCooldownEnd\");\n    if (storedCooldownEnd) {\n      const remainingTime = Math.max(0, Math.ceil((parseInt(storedCooldownEnd) - Date.now()) / 1000));\n      if (remainingTime > 0) {\n        setIsButtonDisabled(true);\n        setCooldownTime(remainingTime);\n      }\n    }\n  }, []);\n\n  // Effect for handling the cooldown timer\n  useEffect(() => {\n    if (isButtonDisabled && cooldownTime > 0) {\n      timerRef.current = setInterval(() => {\n        setCooldownTime(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(timerRef.current);\n            setIsButtonDisabled(false);\n            localStorage.removeItem(\"resendCooldownEnd\");\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000); // Update every second\n    } else if (!isButtonDisabled && cooldownTime === 0 && timerRef.current) {\n      clearInterval(timerRef.current); // Clear timer if button is enabled and cooldown is 0\n    }\n\n    // Cleanup on component unmount\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isButtonDisabled, cooldownTime]);\n  const handleResendClick = async e => {\n    e.preventDefault(); // Prevent default form submission behavior\n\n    if (isButtonDisabled) {\n      return; // Do nothing if the button is disabled\n    }\n    const accountInfo = {\n      \"id\": storage.getItem(\"currUserId\")\n    };\n    setIsButtonDisabled(true);\n    setCooldownTime(COOLDOWN_DURATION);\n    const cooldownEndTime = Date.now() + COOLDOWN_DURATION * 1000;\n    localStorage.setItem(\"resendCooldownEnd\", cooldownEndTime.toString());\n    try {\n      const response = await resendEmail(accountInfo);\n      // Handle success response here if needed\n      console.log(\"Resend email response:\", response);\n      // You might want to show a success message to the user here\n    } catch (error) {\n      // Handle error response here\n      console.error(\"Error resending email:\", error);\n      // You might want to re-enable the button or show an error message\n      // if the API call fails immediately, but for cooldown purposes, we\n      // usually keep it disabled.\n      // Consider more sophisticated error handling like retries or specific error messages.\n    }\n  };\n\n  // Helper function to format time\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Verify Your Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"We Sent a Verification Link to your email.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 59\n      }, this), \"Please click on the link to complete the verification process.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleResendClick,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resend-verify-button\",\n        type: \"submit\" // Set type to submit for form submission\n        ,\n        disabled: isButtonDisabled,\n        children: isButtonDisabled ? `Resend in ${formatTime(cooldownTime)}` : \"Resend Verification Link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), isButtonDisabled && cooldownTime > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You can resend the link in \", formatTime(cooldownTime), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(AccountRegisterAwait, \"mlFHJIWpS4/iKSV8TUQZ6Oe4kJw=\", false, function () {\n  return [useNavigate];\n});\n_c = AccountRegisterAwait;\nexport default AccountRegisterAwait;\nvar _c;\n$RefreshReg$(_c, \"AccountRegisterAwait\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","AccountRegisterAwait","resendEmail","storage","_s","navigate","isButtonDisabled","setIsButtonDisabled","cooldownTime","setCooldownTime","timerRef","COOLDOWN_DURATION","storedCooldownEnd","localStorage","getItem","remainingTime","Math","max","ceil","parseInt","Date","now","current","setInterval","prevTime","clearInterval","removeItem","handleResendClick","e","preventDefault","accountInfo","cooldownEndTime","setItem","toString","response","console","log","error","formatTime","seconds","minutes","floor","remainingSeconds","padStart","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","type","disabled","_c","$RefreshReg$"],"sources":["/Users/tony/Downloads/LinkedIn_Project/Frontend/src/Components/ChildComponents/AccountRegisterAwait.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Assuming you're using react-router-dom for navigation\n\nconst AccountRegisterAwait = ({ resendEmail, storage }) => {\n    const navigate = useNavigate(); // Initialize useNavigate if you're using it elsewhere, otherwise remove\n\n    const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n    const [cooldownTime, setCooldownTime] = useState(0); // Time in seconds\n    const timerRef = useRef(null); // To store the interval ID\n\n    const COOLDOWN_DURATION = 120; // 2 minutes in seconds (adjust as needed)\n\n    // Load cooldown time from storage on component mount\n    useEffect(() => {\n        const storedCooldownEnd = localStorage.getItem(\"resendCooldownEnd\");\n        if (storedCooldownEnd) {\n            const remainingTime = Math.max(0, Math.ceil((parseInt(storedCooldownEnd) - Date.now()) / 1000));\n            if (remainingTime > 0) {\n                setIsButtonDisabled(true);\n                setCooldownTime(remainingTime);\n            }\n        }\n    }, []);\n\n    // Effect for handling the cooldown timer\n    useEffect(() => {\n        if (isButtonDisabled && cooldownTime > 0) {\n            timerRef.current = setInterval(() => {\n                setCooldownTime((prevTime) => {\n                    if (prevTime <= 1) {\n                        clearInterval(timerRef.current);\n                        setIsButtonDisabled(false);\n                        localStorage.removeItem(\"resendCooldownEnd\");\n                        return 0;\n                    }\n                    return prevTime - 1;\n                });\n            }, 1000); // Update every second\n        } else if (!isButtonDisabled && cooldownTime === 0 && timerRef.current) {\n            clearInterval(timerRef.current); // Clear timer if button is enabled and cooldown is 0\n        }\n\n        // Cleanup on component unmount\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [isButtonDisabled, cooldownTime]);\n\n\n    const handleResendClick = async (e) => {\n        e.preventDefault(); // Prevent default form submission behavior\n\n        if (isButtonDisabled) {\n            return; // Do nothing if the button is disabled\n        }\n\n        const accountInfo = {\n            \"id\": storage.getItem(\"currUserId\"),\n        };\n\n        setIsButtonDisabled(true);\n        setCooldownTime(COOLDOWN_DURATION);\n        const cooldownEndTime = Date.now() + COOLDOWN_DURATION * 1000;\n        localStorage.setItem(\"resendCooldownEnd\", cooldownEndTime.toString());\n\n\n        try {\n            const response = await resendEmail(accountInfo);\n            // Handle success response here if needed\n            console.log(\"Resend email response:\", response);\n            // You might want to show a success message to the user here\n        } catch (error) {\n            // Handle error response here\n            console.error(\"Error resending email:\", error);\n            // You might want to re-enable the button or show an error message\n            // if the API call fails immediately, but for cooldown purposes, we\n            // usually keep it disabled.\n            // Consider more sophisticated error handling like retries or specific error messages.\n        }\n    };\n\n    // Helper function to format time\n    const formatTime = (seconds) => {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    };\n\n    return (\n        <>\n            <h1>Verify Your Email</h1>\n            <p>\n                We Sent a Verification Link to your email.<br />\n                Please click on the link to complete the verification process.\n            </p>\n            <form onSubmit={handleResendClick}>\n                <button\n                    className=\"resend-verify-button\"\n                    type=\"submit\" // Set type to submit for form submission\n                    disabled={isButtonDisabled}\n                >\n                    {isButtonDisabled ? `Resend in ${formatTime(cooldownTime)}` : \"Resend Verification Link\"}\n                </button>\n            </form>\n            {isButtonDisabled && cooldownTime > 0 && (\n                <p>You can resend the link in {formatTime(cooldownTime)}.</p>\n            )}\n        </>\n    );\n};\n\nexport default AccountRegisterAwait;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}